<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>מולטי - יועץ חכם עם AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Heebo:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <style>
        :root {
            --primary-bg: #1A1230;
            --secondary-bg: #291a45;
            --accent-gold: #fbbf24;
            --accent-purple: #8e44ad;
            --light-purple: #9b59b6;
            --text-light: #ffffff;
            --text-muted: #b3b3b3;
            --success: #10b981;
            --error: #ef4444;
            --font-body: 'Heebo', sans-serif;
        }
        
        * { margin: 0; padding: 0; box-sizing: border-box; }
        html { height: 100%; }
        
        body {
            font-family: var(--font-body);
            background: linear-gradient(135deg, var(--primary-bg) 0%, var(--secondary-bg) 100%);
            color: var(--text-light);
            display: flex;
            flex-direction: column;
            height: 100%;
            overflow: hidden;
        }

        .ai-header {
            background: linear-gradient(135deg, rgba(251, 191, 36, 0.2), rgba(142, 68, 173, 0.2));
            padding: 1rem;
            border-bottom: 1px solid rgba(251, 191, 36, 0.3);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .ai-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
        }

        .ai-indicator {
            width: 12px;
            height: 12px;
            background: var(--success);
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .ai-indicator.error {
            background: var(--error);
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .control-btn {
            background: rgba(251, 191, 36, 0.2);
            border: 1px solid rgba(251, 191, 36, 0.3);
            color: var(--text-light);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .control-btn:hover {
            background: var(--accent-gold);
            color: #000;
        }

        .chat-area { flex: 1; display: flex; flex-direction: column; overflow: hidden; }
        .chat-messages { flex: 1; overflow-y: auto; padding: 1rem; display: flex; flex-direction: column; gap: 1rem; }
        .message { display: flex; gap: 0.75rem; max-width: 85%; animation: slideIn 0.3s ease-out; }
        
        @keyframes slideIn { 
            from { opacity: 0; transform: translateY(15px); } 
            to { opacity: 1; transform: translateY(0); } 
        }
        
        .message.user { align-self: flex-end; flex-direction: row-reverse; }
        .message-avatar { width: 35px; height: 35px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.1rem; flex-shrink: 0; }
        .message.bot .message-avatar { background: linear-gradient(135deg, var(--accent-gold), var(--light-purple)); color: #000; }
        .message.user .message-avatar { background: linear-gradient(135deg, var(--light-purple), var(--accent-purple)); color: #fff; }
        
        .message-content { 
            background: var(--secondary-bg); 
            padding: 0.8rem 1.2rem; 
            border-radius: 18px; 
            border: 1px solid rgba(184, 134, 11, 0.2); 
            position: relative;
        }

        .message.user .message-content {
            background: rgba(142, 68, 173, 0.3);
            border-color: rgba(142, 68, 173, 0.5);
        }
        
        .message-text { line-height: 1.6; white-space: pre-wrap; }

        .ai-confidence {
            position: absolute;
            top: -8px;
            left: 10px;
            background: var(--success);
            color: white;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
        }
        
        .quick-replies { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 1rem; }
        .quick-reply { 
            background: rgba(184, 134, 11, 0.2); 
            color: var(--text-light); 
            padding: 0.5rem 1rem; 
            border-radius: 20px; 
            border: 1px solid rgba(184, 134, 11, 0.3); 
            cursor: pointer; 
            font-size: 0.9rem; 
            transition: all 0.2s ease; 
        }
        .quick-reply:hover { background: var(--accent-gold); color: #000; transform: translateY(-2px); }

        .ai-suggestion {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 15px;
            padding: 1rem;
            margin: 0.5rem 0;
            font-style: italic;
        }

        .ai-suggestion::before {
            content: "💡 תובנת AI: ";
            font-weight: 700;
            color: var(--success);
        }
        
        .typing-indicator { display: none; align-items: center; gap: 0.5rem; color: var(--text-muted); padding: 0 1rem 0.5rem; }
        .typing-dots { display: flex; gap: 2px; }
        .typing-dot { width: 6px; height: 6px; background: var(--accent-gold); border-radius: 50%; animation: typing 1.4s ease-in-out infinite; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        
        @keyframes typing { 0%, 60%, 100% { transform: translateY(0); } 30% { transform: translateY(-8px); } }
        
        .progress-container { background: rgba(0,0,0,0.2); height: 4px; position: relative; }
        .progress-bar { height: 100%; background: linear-gradient(90deg, var(--accent-gold), var(--light-purple)); width: 0%; transition: width 0.3s ease; }
        .progress-text { position: absolute; top: -25px; right: 10px; font-size: 0.8rem; color: var(--text-muted); }
        
        .summary-card { 
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.2), rgba(6, 182, 212, 0.2)); 
            border: 1px solid rgba(16, 185, 129, 0.3); 
            border-radius: 15px; 
            padding: 1.5rem; 
            margin: 0.5rem 0; 
        }
        .summary-title { font-weight: 700; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem; }
        .summary-content { line-height: 1.6; margin-bottom: 1.5rem; white-space: pre-wrap; font-size: 0.9rem; }
        
        .whatsapp-button { 
            background: #25d366; 
            color: white; 
            padding: 1rem; 
            border: none; 
            border-radius: 25px; 
            font-weight: 700; 
            cursor: pointer; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            gap: 0.5rem; 
            width: 100%; 
            font-size: 1rem; 
            text-decoration: none; 
            transition: all 0.3s ease;
        }

        .whatsapp-button:hover {
            background: #128c7e;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(37, 211, 102, 0.4);
        }
        
        .chat-input-area { padding: 1rem; border-top: 1px solid rgba(124, 58, 237, 0.2); background: rgba(26, 18, 48, 0.8); }
        .input-container { display: flex; gap: 0.5rem; align-items: center; }
        .chat-input { 
            flex: 1; 
            background: rgba(0,0,0,0.2); 
            border: 1px solid rgba(124, 58, 237, 0.3); 
            border-radius: 25px; 
            padding: 0.8rem 1rem; 
            color: white; 
            outline: none; 
            transition: all 0.3s ease;
        }
        .chat-input:focus { border-color: var(--accent-gold); box-shadow: 0 0 0 2px rgba(251, 191, 36, 0.2); }
        .send-button { width: 45px; height: 45px; background: var(--accent-purple); border: none; border-radius: 50%; color: white; font-size: 1rem; cursor: pointer; transition: all 0.3s ease; }
        .send-button:hover { background: var(--light-purple); transform: scale(1.05); }

        .error-message {
            background: rgba(239, 68, 68, 0.2);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: var(--error);
            padding: 1rem;
            border-radius: 10px;
            margin: 0.5rem 0;
        }

        .loading-overlay {
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .loading-spinner {
            width: 40px; height: 40px;
            border: 4px solid rgba(251, 191, 36, 0.3);
            border-top: 4px solid var(--accent-gold);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .ai-header { flex-direction: column; gap: 0.5rem; text-align: center; }
            .message { max-width: 95%; }
        }
    </style>
</head>
<body>
    <div class="ai-header">
        <div class="ai-status">
            <div class="ai-indicator" id="aiIndicator"></div>
            <span id="aiStatus">מולטי AI מתחבר...</span>
        </div>
        <button class="control-btn" onclick="resetConversation()">
            <i class="fas fa-redo"></i> התחל מחדש
        </button>
    </div>

    <div class="chat-area">
        <div class="progress-container">
            <div class="progress-text" id="progressText">0/9 שאלות</div>
            <div class="progress-bar" id="progressBar"></div>
        </div>
        <div class="chat-messages" id="chatMessages"></div>
        <div class="typing-indicator" id="typingIndicator">
            <span>מולטי AI חושב ומנתח...</span>
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
        <div class="chat-input-area">
            <div class="input-container">
                <input type="text" class="chat-input" id="chatInput" placeholder="הקלד את תשובתך כאן...">
                <button class="send-button" id="sendButton"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </div>

    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <script>
        let chatState = {};
        let aiMemory = [];
        
        const chatInput = document.getElementById('chatInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const typingIndicator = document.getElementById('typingIndicator');
        const aiIndicator = document.getElementById('aiIndicator');
        const aiStatus = document.getElementById('aiStatus');

        const chatFlow = [
            { 
                key: "vacationType", 
                question: "שלום! אני מולטי עם בינה מלאכותית מתקדמת! 🤖✨\n\nבואו נתחיל לאסוף פרטים ונמצא לכם את המקום המושלם. מה סוג החופשה או האירוע?", 
                options: ["חופשה משפחתית", "סופ\"ש רומנטי", "אירוע/מסיבה", "חתונה", "אירוע עסקי", "נסיעת עבודה"],
                aiPrompt: "המשתמש בחר סוג חופשה. נתח את הבחירה והמלץ תובנה קצרה ורלוונטית על הבחירה."
            },
            { 
                key: "groupSize", 
                question: "מעולה! כמה אנשים אתם? זה יעזור לי למצוא את הגודל המושלם.", 
                options: ["זוג (2)", "3-5", "6-10", "11-25", "25-50", "50-100", "100+ (אירוע גדול)"],
                aiPrompt: "על בסיס סוג החופשה וגודל הקבוצה, תן תובנה חכמה על סוג הנכס המתאים."
            },
            { 
                key: "timeframe", 
                question: "מתי בערך תרצו לצאת לחופשה? זה יעזור לי לבדוק זמינות ומחירים.",
                options: ["הסופ\"ש הקרוב (דחוף!)", "החודש הקרוב", "בחודשיים הקרובים", "לקראת החגים", "גמיש / בודק אופציות"],
                aiPrompt: "נתח את דחיפות הבקשה ותן טיפ חכם על תמחור או תכנון."
            },
            { 
                key: "specificDates", 
                question: "הבנתי. אם יש תאריך ספציפי, כתבו אותו כאן (למשל: 15-17 במרץ).\nאם לא, פשוט הקלידו 'גמיש'.", 
                options: [],
                aiPrompt: "תגיב לתאריכים שהמשתמש נתן ותן טיפ על איך זה משפיע על האפשרויות."
            },
            { 
                key: "location", 
                question: "איזה אזור בארץ מעניין אתכם?",
                options: ["הצפון (גליל, גולן)", "המרכז (תל אביב, הכרמל)", "הדרום (אילת, מדבר)", "ירושלים והסביבה", "אין העדפה - תפתיעו אותי!"],
                aiPrompt: "על בסיס בחירת המיקום, תן המלצה חכמה על פעילויות או מאפיינים של האזור."
            },
            { 
                key: "amenities", 
                question: "איזה מתקנים הכי חשובים לכם במקום?", 
                options: ["בריכה פרטית", "ג'קוזי ספא", "מטבח מאובזר", "נוף פנורמי", "פרטיות מלאה", "הכל מהכל!", "בקשה מיוחדת"],
                aiPrompt: "נתח את דרישות המשתמש ותן תובנה על איך זה משפיע על סוג הנכס המתאים."
            },
            { 
                key: "otherAmenities", 
                question: "מה עוד חשוב לכם? (כשרות, נגישות, חניה וכו')", 
                options: [],
                aiPrompt: "תגיב לדרישות המיוחדות ותן טיפ איך למצוא בדיוק מה שמחפשים."
            },
            { 
                key: "budget", 
                question: "מה התקציב שלכם? זה יעזור למצוא את ההצעה הכי משתלמת.", 
                options: ["עד ₪2,500", "₪2,500-5,000", "₪5,000-10,000", "₪10,000-20,000", "מעל ₪20,000", "גמיש"],
                aiPrompt: "על בסיס התקציב, תן טיפ חכם על איך לקבל את המקסימום תמורת הכסף."
            },
            { 
                key: "name", 
                question: "כמעט סיימנו! מה שמכם כדי שהצוות יוכל לפנות אליכם אישית?", 
                options: [],
                aiPrompt: "תכין הערה אישית וחמה על הקרב לסיום התהליך."
            },
            { 
                key: "phone", 
                question: "תודה {name}! מה מספר הטלפון הטוב ביותר לחזור אליכם?", 
                options: [],
                aiPrompt: "תכין הודעת סיום חמה ומקצועית עם ציפיות ברורות לזמני מעקב."
            }
        ];

        // Simulated AI response function (replace with real API call)
        async function getAIResponse(userMessage, context) {
            await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
            
            const responses = [
                "בחירה מעולה! זה בדיוק הכיוון הנכון למצוא משהו מושלם.",
                "נהדר! יש לי כמה רעיונות מצוינים בכיוון הזה.",
                "זה נותן לי תמונה ברורה של מה שאתם מחפשים.",
                "מעניין! זה פותח הרבה אפשרויות טובות.",
                "הבנתי בדיוק - זה יעזור לי למקד את החיפוש."
            ];
            
            return responses[Math.floor(Math.random() * responses.length)];
        }

        async function generateAIRecommendations() {
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            return `על בסיס הבקשה שלכם, הכנתי כמה המלצות מותאמות:

🏡 **צימרי בוטיק בגליל העליון**
מושלם עבור ${chatState.userInfo.vacationType || 'החופשה שלכם'} עם נוף פנורמי וכל המתקנים שביקשתם.

🌊 **וילה על הכרמל**
מקום מדהים עם פרטיות מלאה, מתאים בדיוק לגודל הקבוצה שלכם.

🏖️ **נופש יוקרה באילת**
חוויה מלאה עם ספא וכל השירותים, בהתאם לתקציב שהגדרתם.

הצוות המקצועי יחזור אליכם עם פרטים מלאים ומחירים מעודכנים!`;
        }

        // UI Status Functions
        function updateAIStatus(status) {
            const indicator = document.getElementById('aiIndicator');
            const statusText = document.getElementById('aiStatus');
            
            switch(status) {
                case 'online':
                    indicator.className = 'ai-indicator';
                    statusText.textContent = 'מולטי AI מקוון';
                    break;
                case 'thinking':
                    indicator.className = 'ai-indicator';
                    statusText.textContent = 'מולטי AI חושב...';
                    break;
                case 'error':
                    indicator.className = 'ai-indicator error';
                    statusText.textContent = 'מולטי AI - בעיית חיבור';
                    break;
            }
        }

        function showTyping() {
            typingIndicator.style.display = 'flex';
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function hideTyping() {
            typingIndicator.style.display = 'none';
        }

        function updateProgress() {
            const progress = (chatState.currentStep / chatFlow.length) * 100;
            progressBar.style.width = `${progress}%`;
            progressText.textContent = `${chatState.currentStep}/${chatFlow.length} שאלות`;
        }

        // Chat Functions
        function initChat() {
            chatMessages.innerHTML = '';
            chatState = { currentStep: 0, userInfo: {} };
            aiMemory = [];
            updateProgress();
            updateAIStatus('online');
            askNextQuestion();
        }

        async function askNextQuestion() {
            if (chatState.currentStep >= chatFlow.length) {
                await finalizeAndPrepareSummary();
                return;
            }
            
            const current = chatFlow[chatState.currentStep];
            
            // Skip amenities question if no special request was selected
            if (current.key === "otherAmenities" && chatState.userInfo.amenities !== "בקשה מיוחדת") {
                chatState.currentStep++;
                askNextQuestion();
                return;
            }
            
            let questionText = current.question.replace('{name}', chatState.userInfo.name || 'אורח');
            toggleInput(current.options && current.options.length === 0);
            
            await addBotMessage(questionText, current.options);
        }
        
        async function handleOptionClick(option) {
            await displayMessage('user', option);
            const current = chatFlow[chatState.currentStep];
            chatState.userInfo[current.key] = option;
            
            await processUserResponse(option);
        }

        async function handleTextInput() {
            const input = chatInput.value.trim();
            if (!input) return;
            
            chatInput.value = '';
            await displayMessage('user', input);
            
            const current = chatFlow[chatState.currentStep];
            chatState.userInfo[current.key] = input;
            
            await processUserResponse(input);
        }

        async function processUserResponse(response) {
            showTyping();
            updateAIStatus('thinking');
            
            try {
                const aiResponse = await getAIResponse(response, chatState.userInfo);
                hideTyping();
                
                if (aiResponse) {
                    await addAISuggestion(aiResponse);
                }
                
                chatState.currentStep++;
                updateProgress();
                updateAIStatus('online');
                
                setTimeout(() => {
                    askNextQuestion();
                }, 1000);
                
            } catch (error) {
                hideTyping();
                updateAIStatus('error');
                console.error('Error processing response:', error);
                
                chatState.currentStep++;
                updateProgress();
                askNextQuestion();
            }
        }

        async function finalizeAndPrepareSummary() {
            showTyping();
            updateAIStatus('thinking');
            
            try {
                const recommendations = await generateAIRecommendations();
                hideTyping();
                updateAIStatus('online');
                
                await displaySummary(recommendations);
                
            } catch (error) {
                hideTyping();
                updateAIStatus('error');
                console.error('Error generating recommendations:', error);
                
                await displayMessage('bot', 'תודה על המידע! הצוות יחזור אליכם בהקדם עם המלצות מותאמות אישית.');
            }
        }

        async function displayMessage(sender, text, options = []) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.innerHTML = sender === 'bot' ? '🤖' : '👤';
            
            const content = document.createElement('div');
            content.className = 'message-content';
            
            const textDiv = document.createElement('div');
            textDiv.className = 'message-text';
            textDiv.textContent = text;
            
            content.appendChild(textDiv);
            
            if (options && options.length > 0) {
                const quickReplies = document.createElement('div');
                quickReplies.className = 'quick-replies';
                
                options.forEach(option => {
                    const button = document.createElement('button');
                    button.className = 'quick-reply';
                    button.textContent = option;
                    button.onclick = () => handleOptionClick(option);
                    quickReplies.appendChild(button);
                });
                
                content.appendChild(quickReplies);
            }
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(content);
            chatMessages.appendChild(messageDiv);
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            return new Promise(resolve => setTimeout(resolve, 300));
        }

        async function addBotMessage(text, options = []) {
            return displayMessage('bot', text, options);
        }

        async function addAISuggestion(text) {
            const suggestionDiv = document.createElement('div');
            suggestionDiv.className = 'ai-suggestion';
            suggestionDiv.textContent = text;
            
            chatMessages.appendChild(suggestionDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            return new Promise(resolve => setTimeout(resolve, 300));
        }

        async function displaySummary(recommendations) {
            const summaryDiv = document.createElement('div');
            summaryDiv.className = 'summary-card';
            
            const title = document.createElement('div');
            title.className = 'summary-title';
            title.innerHTML = '<i class="fas fa-star"></i> סיכום והמלצות מותאמות אישית';
            
            const content = document.createElement('div');
            content.className = 'summary-content';
            content.textContent = recommendations;
            
            const whatsappLink = document.createElement('a');
            whatsappLink.className = 'whatsapp-button';
            whatsappLink.href = generateWhatsAppLink();
            whatsappLink.target = '_blank';
            whatsappLink.innerHTML = '<i class="fab fa-whatsapp"></i> שלח לווטסאפ לקבלת הצעות';
            
            summaryDiv.appendChild(title);
            summaryDiv.appendChild(content);
            summaryDiv.appendChild(whatsappLink);
            
            chatMessages.appendChild(summaryDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            toggleInput(true, true);
        }

        function generateWhatsAppLink() {
            const phone = '972XXXXXXXXX'; // Replace with actual phone number
            const message = `שלום! סיימתי מילוי הטופס במערכת מולטי AI:

📋 פרטי הבקשה:
• סוג: ${chatState.userInfo.vacationType || 'לא צוין'}
• גודל קבוצה: ${chatState.userInfo.groupSize || 'לא צוין'}
• זמן: ${chatState.userInfo.timeframe || 'לא צוין'}
• תאריכים: ${chatState.userInfo.specificDates || 'גמיש'}
• מיקום: ${chatState.userInfo.location || 'לא צוין'}
• מתקנים: ${chatState.userInfo.amenities || 'לא צוין'}
• דרישות נוספות: ${chatState.userInfo.otherAmenities || 'אין'}
• תקציב: ${chatState.userInfo.budget || 'לא צוין'}
• שם: ${chatState.userInfo.name || 'לא צוין'}
• טלפון: ${chatState.userInfo.phone || 'לא צוין'}

אשמח לקבל הצעות מותאמות!`;
            
            return `https://wa.me/${phone}?text=${encodeURIComponent(message)}`;
        }

        function toggleInput(enable, hideCompletely = false) {
            const inputArea = document.querySelector('.chat-input-area');
            if (hideCompletely) {
                inputArea.style.display = 'none';
            } else {
                inputArea.style.display = 'block';
                chatInput.disabled = !enable;
                sendButton.disabled = !enable;
                if (enable) {
                    chatInput.focus();
                }
            }
        }

        function resetConversation() {
            if (confirm('האם אתה בטוח שברצונך להתחיל מחדש?')) {
                initChat();
            }
        }

        // Event Listeners
        sendButton.addEventListener('click', handleTextInput);
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleTextInput();
            }
        });

        // Initialize chat when page loads
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                initChat();
            }, 500);
        });
    </script>
</body>
</html>
